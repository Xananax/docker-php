# vi:syntax=sh
#!/usr/bin/env bash


source ./files/utils/confirm.sh
source ./files/utils/check_dir.sh

VERSION="0.1"
ROOT="$PWD"
MODELS_DIR="$PWD/files"

PROJECT_NAME="${PROJECT:-wordpress}"
PORT_HOST="${PORT:-3000}"
USE_MYSQL="${USE_MYSQL:0}"
USE_PGSQL="${USE_PGSQL:0}"

CONTAINER_NAME="${CONTAINER_NAME:-$PROJECT_NAME}"
BASE_IMAGE="${BASE_IMAGE:-xananax/php}"

GLOBAL_DIR="${GLOBAL_DIR:-$PROJECT_NAME}"
LOCAL_DIR="$GLOBAL_DIR"/"${LOCAL_DIR:-container}"
SERVER_DATA_DIR="$LOCAL_DIR"/"${SERVER_DATA_DIR:-www}"
DOCUMENT_DIR="$SERVER_DATA_DIR/html"
COMPOSER_CACHE_DIR="$LOCAL_DIR"/"${COMPOSER_CACHE_DIR:-composer}"
DATA_DIR="$LOCAL_DIR"/"${DATA_DIR:-data}"
MYSQL_DATA_DIR="$DATA_DIR"/"${MYSQL_DATA_DIR:-mysql}"
PGSQL_DATA_DIR="$DATA_DIR"/"${PGSQL_DATA_DIR:-pgsql}"
LOG_DIR="$LOCAL_DIR"/"${LOG_DIR:-log}"
SERVER_LOG_DIR="$LOG_DIR/apache"
MYSQL_LOG_DIR="$LOG_DIR/mysql"
PGSQL_LOG_DIR="$LOG_DIR/pgsql"

DB_USER="${DB_USER:-user}"
DB_PASSWORD="${DB_PASSWORD:-password}"
DB_NAME="${DB_NAME:-$PROJECT_NAME}"

MYSQL_USER="${MYSQL_USER:-$DB_USER}"
MYSQL_PASSWORD="${MYSQL_PASSWORD:-$DB_PASSWORD}"
MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD:-$MYSQL_PASSWORD}"
MYSQL_IMAGE="${MYSQL_IMAGE:-mariadb}"
MYSQL_CONTAINER_NAME="${MYSQL_CONTAINER_NAME:-database_mysql}"
MYSQL_DATABASE="${MYSQL_DATABASE:-$DB_NAME}"

PGSQL_USER="${PGSQL_USER:-$DB_USER}"
PGSQL_PASSWORD="${PGSQL_PASSWORD:-$DB_PASSWORD}"
PGSQL_IMAGE="${PGSQL_IMAGE:-postgres}"
PGSQL_CONTAINER_NAME="${PGSQL_CONTAINER_NAME:-database_pgsql}"
PGSQL_DATABASE="${PGSQL_DATABASE:-$DB_NAME}"

# PGSQL
PORT_CONTAINER=80
# User ID of www-data in the docker
CONTAINER_USER_ID=33

RUN_FILE="$MODELS_DIR/first-run/$PROJECT_NAME.sh"

if [ "$USE_MYSQL" ] || [ "$USE_PGSQL" ]; then
	USING_DATABASE=true
fi

SERVER_DATA_DIR_REL=".${SERVER_DATA_DIR#$ROOT}"
DOCUMENT_DIR_REL=".${DOCUMENT_DIR#$ROOT}"
LOG_DIR_REL=".${LOG_DIR#$ROOT}"
SERVER_LOG_DIR_REL=".${SERVER_LOG_DIR#$ROOT}"
MYSQL_LOG_DIR_REL=".${MYSQL_LOG_DIR#$ROOT}"
PGSQL_LOG_DIR_REL=".${PGSQL_LOG_DIR#$ROOT}"
MODELS_DIR_REL=".${MODELS_DIR#$ROOT}"
MYSQL_DATA_DIR_REL=".${MYSQL_DATA_DIR#$ROOT}"
PGSQL_DATA_DIR_REL=".${PGSQL_DATA_DIR#$ROOT}"
COMPOSER_CACHE_DIR_REL=".${COMPOSER_CACHE_DIR#$ROOT}"
DATA_DIR_REL=".${DATA_DIR#$ROOT}"

SERVER_DATA_DIR_DOCKER=".${SERVER_DATA_DIR#$GLOBAL_DIR}"
DOCUMENT_DIR_DOCKER=".${DOCUMENT_DIR#$GLOBAL_DIR}"
LOG_DIR_DOCKER=".${LOG_DIR#$GLOBAL_DIR}"
SERVER_LOG_DIR_DOCKER=".${SERVER_LOG_DIR#$GLOBAL_DIR}"
MYSQL_LOG_DIR_DOCKER=".${MYSQL_LOG_DIR#$GLOBAL_DIR}"
PGSQL_LOG_DIR_DOCKER=".${PGSQL_LOG_DIR#$GLOBAL_DIR}"
MODELS_DIR_DOCKER=".${MODELS_DIR#$GLOBAL_DIR}"
MYSQL_DATA_DIR_DOCKER=".${MYSQL_DATA_DIR#$GLOBAL_DIR}"
PGSQL_DATA_DIR_DOCKER=".${PGSQL_DATA_DIR#$GLOBAL_DIR}"
COMPOSER_CACHE_DIR_DOCKER=".${COMPOSER_CACHE_DIR#$GLOBAL_DIR}"
DATA_DIR_DOCKER=".${DATA_DIR#$GLOBAL_DIR}"

function title(){
	echo ""
	echo "----- $1 -----"
	echo ""
}


function replace(){
	DEPENDS_ON=''
	if [ "$USING_DATABASE" ]; then
		DEPENDS_ON="    depends_on:\n"
		if [ "$USE_MYSQL" ]; then
			DEPENDS_ON="$DEPENDS_ON      - $MYSQL_CONTAINER_NAME\n"
		fi
		if [ "$USE_PGSQL" ]; then
			DEPENDS_ON="$DEPENDS_ON      - $PGSQL_CONTAINER_NAME\n"
		fi
	fi
	touch "$2" && \
	cat "$1" | \
	sed \
	  -e 's,%SERVER_DATA_DIR%,'"$SERVER_DATA_DIR"',g' \
	  -e 's,%PORT_HOST%,'"$PORT_HOST"',g' \
	  -e 's,%BASE_IMAGE%,'"$BASE_IMAGE"',g' \
	  -e 's,%CONTAINER_NAME%,'"$CONTAINER_NAME"',g' \
	  -e 's,%SERVER_DATA_DIR_REL%,'"$SERVER_DATA_DIR_DOCKER"',g' \
	  -e 's,%DOCUMENT_DIR%,'"$DOCUMENT_DIR"',g' \
	  -e 's,%DOCUMENT_DIR_REL%,'"$DOCUMENT_DIR_DOCKER"',g' \
	  -e 's,%DATA_DIR%,'"$DATA_DIR"',g' \
	  -e 's,%DB_NAME%,'"$DB_NAME"',g' \
	  -e 's,%MYSQL_IMAGE%,'"$MYSQL_IMAGE"',g' \
	  -e 's,%MYSQL_USER%,'"$MYSQL_USER"',g' \
	  -e 's,%MYSQL_PASSWORD%,'"$MYSQL_PASSWORD"',g' \
	  -e 's,%MYSQL_ROOT_PASSWORD%,'"$MYSQL_ROOT_PASSWORD"',g' \
	  -e 's,%MYSQL_DATA_DIR_REL%,'"$MYSQL_DATA_DIR_DOCKER"',g' \
	  -e 's,%MYSQL_LOG_DIR_REL%,'"$MYSQL_LOG_DIR_DOCKER"',g' \
	  -e 's,%MYSQL_CONTAINER_NAME%,'"$MYSQL_CONTAINER_NAME"',g' \
	  -e 's,%MYSQL_DATABASE%,'"$MYSQL_DATABASE"',g' \
	  -e 's,%PGSQL_IMAGE%,'"$PGSQL_IMAGE"',g' \
	  -e 's,%PGSQL_USER%,'"$PGSQL_USER"',g' \
	  -e 's,%PGSQL_PASSWORD%,'"$PGSQL_PASSWORD"',g' \
	  -e 's,%PGSQL_DATA_DIR_REL%,'"$PGSQL_DATA_DIR_DOCKER"',g' \
	  -e 's,%PGSQL_LOG_DIR_REL%,'"$PGSQL_LOG_DIR_DOCKER"',g' \
	  -e 's,%PGSQL_CONTAINER_NAME%,'"$PGSQL_CONTAINER_NAME"',g' \
	  -e 's,%PGSQL_DATABASE%,'"$PGSQL_DATABASE"',g' \
	  -e 's,%COMPOSER_CACHE_DIR%,'"$COMPOSER_CACHE_DIR"',g' \
	  -e 's,%COMPOSER_CACHE_DIR_REL%,'"$COMPOSER_CACHE_DIR_DOCKER"',g' \
	  -e 's,%DATA_DIR_REL%,'"$DATA_DIR_DOCKER"',g' \
	  -e 's,%SERVER_LOG_DIR_REL%,'"$SERVER_LOG_DIR_DOCKER"',g' \
	  -e 's,%DEPENDS_ON%,'"$DEPENDS_ON"',g' \
	  -e 's,%VERSION%,'"$VERSION"',g' \
	>> "$2"
	chmod +777 "$2"
}

title "BASE"
echo "This script will create the needed directories and set the environment variables"
echo "server root directory will be:\`$SERVER_DATA_DIR_REL\`"
echo "documents directory will be:\`$DOCUMENT_DIR_REL\`"
echo "logs will be available in: \`$LOG_DIR_REL\`"
echo "server will be available on the host at:\`localhost:$PORT_HOST\`"
echo ""
echo "Everything in \`$MODELS_DIR_REL\` will be copied to \`$SERVER_DATA_DIR_REL\`"
echo "And variables will be replaced accordingly"
title "DATABASES"
if [ "$USING_DATABASE" ]; then
	if [ "$USE_MYSQL" ]; then 
		echo ""
		echo "MySQL will be used"
		echo "databases will be inside \`$MYSQL_DATA_DIR_REL\`"
		echo "with user \`$MYSQL_USER\` and password \`$MYSQL_PASSWORD\`"
		echo "logs will be available in \`$MYSQL_LOG_DIR_REL\`"
		echo "MySQL will be available inside the container as \`$MYSQL_CONTAINER_NAME:3306\`"
		echo "a database \`$MYSQL_DATABASE\` will be created"
	fi;
	if [ "$USE_PGSQL" ]; then 
		echo ""
		echo "PostgresSQL will be used"
		echo "databases will be inside \`$PGSQL_DATA_DIR_REL\`"
		echo "with user \`$PGSQL_USER\` and password \`$PGSQL_PASSWORD\`"
		echo "logs will be available in \`$PGSQL_LOG_DIR_REL\`"
		echo "PGSQL will be available inside the container as \`$PGSQL_CONTAINER_NAME:5432\`"
		echo "a database \`$PGSQL_DATABASE\` will be created"
	fi;
else
	echo "Not using MySQL nor PostgresSQL, you will only have access to SQLite inside the container"
fi;
echo ""

CONTINUE=`confirm "Does this summary seem correct?"`

if [ "$CONTINUE" == "no" ]; then
	echo "exiting..."
	exit 1
fi;

title "COMPOSER"
# create the composer cache if it doesn't exist
check_dir "$COMPOSER_CACHE_DIR" "$COMPOSER_CACHE_DIR_REL" "$CONTAINER_USER_ID"

title "DATA DIRECTORIES"
check_dir "$DATA_DIR" "$DATA_DIR_REL" "$CONTAINER_USER_ID"

title "LOG DIRECTORIES"
check_dir "$SERVER_LOG_DIR" "$SERVER_LOG_DIR_REL" "$CONTAINER_USER_ID"

if [ "$USE_MYSQL" ]; then
	
	title "DATA - MySQL"
	check_dir "$MYSQL_DATA_DIR" "$MYSQL_DATA_DIR_REL" "$CONTAINER_USER_ID"
	check_dir "$MYSQL_LOG_DIR" "$MYSQL_LOG_DIR_REL" "$CONTAINER_USER_ID"
	
fi

if [ "$USE_PGSQL" ]; then
	
	title "DATA - PostgresSQL"
	check_dir "$PGSQL_DATA_DIR" "$PGSQL_DATA_DIR_REL" "$CONTAINER_USER_ID"
	check_dir "$PGSQL_LOG_DIR" "$PGSQL_LOG_DIR_REL" "$CONTAINER_USER_ID"
	
fi

title "MAIN FILES"
# Create the server base if it doesn't exist
if [ ! -d "$DOCUMENT_DIR" ]; then
	echo "\`$DOCUMENT_DIR_REL\` does not exist, attempting to create it"
	mkdir -p "$DOCUMENT_DIR"
	replace "$MODELS_DIR/bashrc.sh" "$SERVER_DATA_DIR/.bashrc"
	replace "$MODELS_DIR/index.php" "$DOCUMENT_DIR/index.php"
	chmod -R +777 $SERVER_DATA_DIR
	sudo chown -R $CONTAINER_USER_ID:$CONTAINER_USER_ID $SERVER_DATA_DIR
else
	echo "\`$DOCUMENT_DIR_REL\` exists, skipping creation"
fi

function check_file () {
	REL_FILE=".${1#$ROOT}"
	if [ ! -f "$1" ]; then
		echo "\`$REL_FILE\` does not exist, attempting to create it"
		replace "$2" "$1"
	else
		echo "\`$REL_FILE\` exists, skipping creation"
	fi
}

title "DOCKER-COMPOSE"
check_file "$GLOBAL_DIR/docker-compose.yml" "$MODELS_DIR/docker-compose.yml" 

title "UTILITIES"
check_file "$GLOBAL_DIR/connect_server" "$MODELS_DIR/connect_server.sh"
if [ "$USE_MYSQL" ]; then
	check_file "$GLOBAL_DIR/connect_mysql" "$MODELS_DIR/connect_mysql.sh"
fi
if [ "$USE_PGSQL" ]; then
	check_file "$GLOBAL_DIR/connect_pgsql" "$MODELS_DIR/connect_pgsql.sh"
fi

if [ -f "$RUN_FILE" ]; then
    title "EASY INSTALLATION FILE"
	echo "Install file found for $PROJECT_NAME, will copy in server root directory"
	check_file "$SERVER_DATA_DIR/install.sh" "$RUN_FILE"
	check_file "$GLOBAL_DIR/run_server_install" "$MODELS_DIR/run_server_install.sh"
	echo "use ./run_server_install in \`.${GLOBAL_DIR#$PWD}\` to run the installation"
fi

title "DONE"
echo "Everything is prepped. Now just cd into \`.${LOCAL_DIR#$PWD}\` and run"
echo "  docker-compose up"
echo "Then open your browser and point it to"
echo "  \`localhost:$PORT_HOST\`"
echo "to remove everything, run"
echo "  ./clean $LOCAL_DIR"
echo "Enjoy!"
echo ""

RUN_COMPOSE=`confirm "Do you want to run docker-compose?"`

if [ "$RUN_COMPOSE" == "no" ]; then
	echo "exiting..."
	exit 0
else
    cd $LOCAL_DIR && docker-compose up
fi;

